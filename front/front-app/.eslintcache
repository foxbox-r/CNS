[{"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\index.js":"1","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\reportWebVitals.js":"2","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\App.js":"3","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\modules\\index.js":"4","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\sagas\\index.js":"5","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Profile.js":"6","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Signup.js":"7","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Home.js":"8","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Hashtag.js":"9","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\ZoomImg.js":"10","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\NavProfile.js":"11","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\UserProfile.js":"12","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\hooks\\useInput.js":"13","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\modules\\userReducer.js":"14","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\modules\\postReducer.js":"15","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\sagas\\postSaga.js":"16","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\sagas\\userSaga.js":"17","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\PostForm.js":"18","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Posts.js":"19","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\backAddress.js":"20","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\ImageForm.js":"21","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Post.js":"22","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Comments.js":"23","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Comment.js":"24","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\CommentForm.js":"25"},{"size":999,"mtime":1611588356428,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":2007,"mtime":1612737320182,"results":"29","hashOfConfig":"27"},{"size":224,"mtime":1611583627813,"results":"30","hashOfConfig":"27"},{"size":356,"mtime":1612178413314,"results":"31","hashOfConfig":"27"},{"size":1070,"mtime":1612731645291,"results":"32","hashOfConfig":"27"},{"size":4352,"mtime":1611924165682,"results":"33","hashOfConfig":"27"},{"size":1677,"mtime":1612730073795,"results":"34","hashOfConfig":"27"},{"size":943,"mtime":1612738259102,"results":"35","hashOfConfig":"27"},{"size":1238,"mtime":1612003069192,"results":"36","hashOfConfig":"27"},{"size":2969,"mtime":1612181127795,"results":"37","hashOfConfig":"27"},{"size":1030,"mtime":1612737445205,"results":"38","hashOfConfig":"27"},{"size":258,"mtime":1611584231561,"results":"39","hashOfConfig":"27"},{"size":4019,"mtime":1612730405546,"results":"40","hashOfConfig":"27"},{"size":11480,"mtime":1612734971702,"results":"41","hashOfConfig":"27"},{"size":8501,"mtime":1612733517841,"results":"42","hashOfConfig":"27"},{"size":2588,"mtime":1612730586483,"results":"43","hashOfConfig":"27"},{"size":3915,"mtime":1612183561915,"results":"44","hashOfConfig":"27"},{"size":241,"mtime":1612183288206,"results":"45","hashOfConfig":"27"},{"size":80,"mtime":1612183098450,"results":"46","hashOfConfig":"27"},{"size":1398,"mtime":1611917716649,"results":"47","hashOfConfig":"27"},{"size":6890,"mtime":1612737327553,"results":"48","hashOfConfig":"27"},{"size":480,"mtime":1611923309584,"results":"49","hashOfConfig":"27"},{"size":699,"mtime":1612738008714,"results":"50","hashOfConfig":"27"},{"size":1574,"mtime":1612183567997,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1ugi0d8",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"54"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\index.js",[],["119","120"],"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\reportWebVitals.js",[],"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\App.js",["121"],"import {Switch,Route,Link} from \"react-router-dom\"\nimport './App.css';\nimport Home from \"./components/Home\"\nimport Signup from \"./components/Signup\"\nimport Profile from \"./components/Profile\"\nimport NavProfile from \"./components/NavProfile\"\nimport ZoomImg from \"./components/ZoomImg\"\nimport Hashtag from \"./components/Hashtag\"\nimport useInput from \"./hooks/useInput\"\nimport { useCallback } from \"react\";\nimport withRouter from \"with-router\"\nimport UserProfile from \"./components/UserProfile\"\n\nfunction App({history}) {\n  const [value,setValue,onChangeValue] = useInput(\"\");\n  const onSubmit = useCallback((e)=>{\n    e.preventDefault();\n    history.push(`/hashtag/${value}`);\n    setValue(\"\");\n  },[value]);\n  return (\n    <div id=\"App\" className=\"App\">\n      \n      <header id=\"header\">\n        <Link to=\"/\">home</Link>\n        <Link to=\"/profile\">profile</Link>\n        <Link to=\"/signup\">signup</Link>\n        <div id=\"header_search_box\">\n          <form onSubmit={onSubmit}>\n            <input onChange={onChangeValue} value={value} type=\"text\"/>\n            <input type=\"submit\" value=\"serach\" />\n          </form>\n        </div>\n      </header>\n\n    <div id=\"main_wrapper\">\n      \n      <nav id=\"nav\" className=\"main_child\">\n        <NavProfile />\n      </nav>\n\n      <article id='article' className=\"main_child\">\n        <Switch>\n          <Route path=\"/\" component={Home} exact />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/signup\" component={Signup} />\n          <Route path=\"/hashtag/:tag\" component={Hashtag} />\n          <Route path=\"/userPosts/:UserId\" component={UserProfile} />\n          <Route render={({location})=><h1>404 || can't find {location.pathname}.</h1>} />\n        </Switch>\n      </article>\n\n      <aside id=\"aside\" className=\"main_child\">\n        <h1>aside</h1>\n      </aside>\n    </div>\n\n      <footer id=\"footer\">\n        <p>email : foxboxr@gmail.com</p>\n      </footer>\n      <ZoomImg />\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\modules\\index.js",[],"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\sagas\\index.js",[],"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Profile.js",["122","123"],"import React,{useEffect,useCallback} from 'react';\r\nimport {useDispatch,useSelector} from \"react-redux\"\r\nimport {LOAD_MY_POSTS_REQUEST} from \"../modules/postReducer\"\r\nimport withRouter from \"with-router\"\r\nimport PostForm from \"../components/PostForm\"\r\nimport Posts from \"../components/Posts\"\r\n\r\nfunction Profile({history}){\r\n    const dispatch = useDispatch();\r\n    const {me} = useSelector(state=>state.userReducer);\r\n    const {posts,loadPostLoading} = useSelector(state=>state.postReducer);\r\n\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type:LOAD_MY_POSTS_REQUEST,\r\n        })\r\n    },[])\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        if(!me){\r\n            return history.push(\"/\");\r\n        }\r\n    })\r\n\r\n\r\n    if(!me){\r\n        return null;\r\n    }\r\n\r\n    return (\r\n    <>\r\n    {\r\n        !loadPostLoading?(\r\n            <>\r\n                <PostForm />\r\n                <div id=\"Home\">\r\n                    <Posts posts={posts} />\r\n                </div>\r\n            </>\r\n        ):<h1>loading..</h1>\r\n    }\r\n    </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Profile);","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Signup.js",["124","125","126","127","128","129","130","131","132","133"],"import React,{useCallback,useState,useEffect} from 'react';\r\nimport useInput from \"../hooks/useInput\"\r\nimport {useDispatch,useSelector} from \"react-redux\"\r\nimport {SIGN_UP_REQUEST} from \"../modules/userReducer\"\r\nimport withRouter from \"with-router\"\r\n\r\nfunction Signup({history}){\r\n\r\n    const dispatch = useDispatch();\r\n    const {signUpDone,signUpLoading,signUpError,me} = useSelector(state=>state.userReducer);\r\n    const [mail,setMail,onChangeMail] = useInput(\"\");\r\n    const [password,setPassword,onChangePassword] = useInput(\"\");\r\n    const [passwordCheck,setPasswordCheck,onChangePasswordCheck] = useInput(\"\");\r\n    const [name,setName,onChangeName] = useInput(\"\");\r\n    const [color,setColor,onChangeColor] = useInput(\"#ffffff\");\r\n    const [backgroundColor,setBackgroundColor,onChangeBackgroundColor] = useInput(\"#000000\");\r\n\r\n    const [isSame,setIsSame] = useState(false);\r\n    const [isAgree,setIsAgree] = useState(false);\r\n\r\n    const onChangeIsAgree = useCallback((e)=>{\r\n        setIsAgree((prev)=>!prev);\r\n    },[]);\r\n\r\n    const onComparePassword = useCallback((e)=>{\r\n        onChangePasswordCheck(e);\r\n        if(password === e.target.value){\r\n            setIsSame(true);\r\n        } else{\r\n            setIsSame(false);\r\n        }\r\n    },[password,passwordCheck]);\r\n\r\n    const onSubmit = useCallback((e)=>{\r\n        e.preventDefault();\r\n        if(isSame && isAgree){\r\n            // console.log(mail,password,name)\r\n           dispatch({\r\n               type:SIGN_UP_REQUEST,\r\n               data:{\r\n                   mail,password,name,color,backgroundColor,\r\n               }\r\n           })\r\n        } else{\r\n            if(!isSame)\r\n                alert(\"패스워드를 다시 확인해주세요.\");\r\n            if(!isAgree)\r\n                alert(\"동의하셔야 회원가입을 할 수 있습니다.\");\r\n        }\r\n        \r\n    },[mail,password,name,isSame,isAgree]);\r\n\r\n    useEffect(()=>{\r\n        if(signUpDone){\r\n            history.push(\"/\");\r\n        }\r\n    },[signUpDone]);\r\n\r\n    useEffect(()=>{\r\n        if(me){\r\n            history.push(\"/\");\r\n        }\r\n    },[me])\r\n\r\n    useEffect(()=>{\r\n        if(signUpError){\r\n            alert(signUpError);\r\n        }\r\n    },[signUpError]);\r\n\r\n    return (\r\n        <div id=\"Signup\">\r\n            <h1>Signup</h1>\r\n            <form onSubmit={onSubmit}>\r\n                <div>\r\n                    <p>Mail</p>\r\n                    <input type=\"text\" placeholder=\"Insert you mail.\" value={mail} onChange={onChangeMail}/>\r\n                </div>\r\n                <div>\r\n                    <p>Password</p>\r\n                    <input type=\"text\" placeholder=\"Insert you password.\" value={password} onChange={onChangePassword}/>\r\n                </div>\r\n                <div>\r\n                    <p>Check password {isSame?<span className=\"goodSpan\"> Same!</span>:<span className=\"badSpan\"> Not Same.</span>}</p>\r\n                    <input type=\"text\" placeholder=\"Insert you check password.\" value={passwordCheck} onChange={onComparePassword}/>\r\n                </div>\r\n                <div>\r\n                    <p>Name</p>\r\n                    <input type=\"text\" placeholder=\"Insert you name.\" value={name} onChange={onChangeName}/>\r\n                </div>\r\n                <div>\r\n                    <p>Color</p>\r\n                    <input type=\"color\" value={color} onChange={onChangeColor}/>\r\n                </div>\r\n                <div>\r\n                    <p>Background Color</p>\r\n                    <input type=\"color\" value={backgroundColor} onChange={onChangeBackgroundColor}/>\r\n                </div>\r\n                <div className=\"checkBoxWrapper\">\r\n                    <p>Do you agree?</p>\r\n                    <input id=\"Signup_check_agree\" type=\"checkbox\" value={isAgree} onChange={onChangeIsAgree} />\r\n                    {isAgree\r\n                        ?<label htmlFor=\"Signup_check_agree\"><span className=\"goodSpan\">Yes, I agree.</span></label>\r\n                        :<label htmlFor=\"Signup_check_agree\"><span className=\"badSpan\">No, I don't agree.</span></label>\r\n                    }\r\n                    </div>\r\n                <div>\r\n                    <input type=\"submit\" value={signUpLoading?\"loading...\":\"Submit\"}></input>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Signup);","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Home.js",["134","135"],"import React,{useEffect} from 'react';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport Posts from \"./Posts\"\r\nimport {LOAD_POSTS_REQUEST} from \"../modules/postReducer\"\r\nimport {LOAD_MY_INFO_REQUEST} from \"../modules/userReducer\"\r\nimport PostForm from \"./PostForm\"\r\n\r\nfunction Home(){\r\n    const dispatch = useDispatch();\r\n    const {posts,loadPostsLoading,canLoadPosts,} = useSelector(state=>state.postReducer);\r\n\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type:LOAD_POSTS_REQUEST,\r\n        });\r\n        dispatch({\r\n            type:LOAD_MY_INFO_REQUEST,\r\n        })\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        function onScroll(e){\r\n            // console.log(\"scroll Y :\",window.scrollY)\r\n            // console.log(\"client view height :\",document.documentElement.clientHeight);\r\n            // console.log(document.documentElement.scrollHeight);\r\n            const result = document.documentElement.scrollHeight-document.documentElement.clientHeight-300 < window.scrollY;\r\n            if(result && !loadPostsLoading && canLoadPosts){\r\n                dispatch({\r\n                    type:LOAD_POSTS_REQUEST,\r\n                    data:posts[posts.length-1].id,\r\n                })\r\n            } else{\r\n                console.log(\"cant\");\r\n            }\r\n        }\r\n        window.addEventListener(\"scroll\",onScroll);\r\n\r\n        return ()=>{\r\n            window.removeEventListener(\"scroll\",onScroll);\r\n        }\r\n    },[posts,loadPostsLoading,canLoadPosts])\r\n\r\n    return (\r\n        <>\r\n            <PostForm />\r\n            <div id=\"Home\">\r\n                <Posts posts={posts} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home;","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Hashtag.js",["136","137"],"import React,{useEffect,useCallback} from 'react';\r\nimport {useDispatch,useSelector} from \"react-redux\"\r\nimport {LOAD_HASHTAG_POSTS_REQUEST} from \"../modules/postReducer\"\r\nimport withRouter from \"with-router\"\r\nimport PostForm from \"../components/PostForm\"\r\nimport Posts from \"../components/Posts\"\r\n\r\nfunction Hashtag({history,match}){\r\n    const dispatch = useDispatch();\r\n    const {posts,loadPostLoading} = useSelector(state=>state.postReducer);\r\n    const {tag} = match.params;\r\n\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type:LOAD_HASHTAG_POSTS_REQUEST,\r\n            data:tag,\r\n        })\r\n    },[tag]);\r\n\r\n\r\n\r\n    return (\r\n    <>\r\n    {\r\n        !loadPostLoading?(\r\n            <>\r\n                <PostForm />\r\n                <div id=\"Home\">\r\n                    <Posts posts={posts} />\r\n                </div>\r\n            </>\r\n        ):<h1>loading..</h1>\r\n    }\r\n    </>\r\n    );\r\n}\r\n\r\nexport default withRouter(Hashtag);","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\ZoomImg.js",["138"],"import React,{useCallback,useEffect,useState} from 'react';\r\nimport {useSelector,useDispatch} from \"react-redux\";\r\nimport {backAddress} from \"../backAddress\"\r\nimport {ZOOM_IMAGE_OUT_REQUEST} from \"../modules/postReducer\"\r\n\r\nfunction ZoomImg(){\r\n    const dispatch = useDispatch();\r\n    const {zoomImg,zoomStatus} = useSelector(state=>state.postReducer);\r\n    \r\n    const [nowIndex,setNowIndex] = useState(0);\r\n\r\n    const onClick = useCallback((e)=>{\r\n        dispatch({\r\n            type:ZOOM_IMAGE_OUT_REQUEST,\r\n        });\r\n    },[]);\r\n\r\n    const onClickImg = useCallback((e)=>{\r\n        e.stopPropagation(); // 버블링 막기\r\n        const nextIndex = (nowIndex+1)%zoomImg.length;\r\n        console.log(nextIndex);\r\n        setNowIndex(nextIndex);\r\n    },[nowIndex,zoomImg]);\r\n\r\n    useEffect(()=>{\r\n        setNowIndex(0);\r\n    },[zoomStatus])\r\n\r\n    return (\r\n        <div onClick={onClick} style={{display:zoomStatus}} id=\"ZoomImg\">\r\n            <article>\r\n                <img title=\"Click to next\" onClick={onClickImg} src={`${backAddress}/${zoomImg[nowIndex]}`} alt=\"\"/>\r\n                <p style={{color:\"white\"}}>{nowIndex+1}/{zoomImg.length}</p>\r\n            </article>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ZoomImg;","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\NavProfile.js",["139","140"],"import React,{useCallback} from 'react';\r\nimport {useDispatch,useSelector} from \"react-redux\"\r\nimport {Link} from \"react-router-dom\"\r\nimport useInput from \"../hooks/useInput\"\r\nimport {LOG_IN_REQUEST,LOG_OUT_REQUEST} from \"../modules/userReducer\"\r\n\r\nfunction NavProfile(){\r\n    const dispatch = useDispatch();\r\n    const {me}  = useSelector(state=>state.userReducer);\r\n\r\n    const [mail,setMail,onChangeMail] = useInput(\"\");\r\n    const [password,setPassword,onChangePassword] = useInput(\"\");\r\n\r\n    const onSubmit = useCallback((e)=>{\r\n        e.preventDefault();\r\n        console.log(mail,password);\r\n        setMail(\"\");\r\n        setPassword(\"\");\r\n        dispatch({\r\n            type:LOG_IN_REQUEST,\r\n            data:{mail,password}\r\n        })\r\n    },[mail,password])\r\n\r\n    const onLogOut = useCallback(()=>{\r\n        dispatch({\r\n            type:LOG_OUT_REQUEST\r\n        })\r\n    },[])\r\n\r\n    \r\n\r\n    if(me){\r\n        return (\r\n            <div id=\"NavProfile_profile\" className=\"NavProfile\">\r\n                <header>\r\n                    <div style={{color:me.color,backgroundColor:me.backgroundColor}}>{me.name[0].toUpperCase()}</div>\r\n                </header>\r\n                <article>\r\n                    <div className=\"nameBox\">{me.name}</div>\r\n                    <div className=\"numberBox\">\r\n                        <div>Subscriber : {me.Clients.length}</div>\r\n                        <div>posts : {me.Posts.length}</div>\r\n                    </div>\r\n                </article>\r\n                <footer>\r\n                    <button onClick={onLogOut}>logout</button>\r\n                </footer>\r\n            </div>\r\n        )\r\n    }else{\r\n        return (\r\n            <div id=\"NavProfile_login\" className=\"NavProfile\">\r\n                <form onSubmit={onSubmit}>\r\n                    <header>\r\n                        <h1>Login</h1>\r\n                    </header>\r\n                    <article>\r\n                        <div>\r\n                            <p>Mail</p>\r\n                            <input type=\"text\" value={mail} placeholder=\"Insert you mail.\" onChange={onChangeMail}/>\r\n                        </div>\r\n                        \r\n                        <div>\r\n                            <p>Password</p>\r\n                            <input type=\"password\" value={password}  placeholder=\"Insert you password.\" onChange={onChangePassword}/>\r\n                        </div>\r\n                    </article>\r\n\r\n                    <footer>\r\n                        <div className=\"button\">\r\n                            <button type=\"submit\">Login</button>\r\n                        </div>\r\n                        <div className=\"button\">\r\n                            <Link to=\"/signup\">\r\n                                <button>Signup</button>\r\n                            </Link>\r\n                        </div>\r\n                    </footer>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default NavProfile;","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\UserProfile.js",["141","142","143","144","145"],"import React,{useEffect,useCallback} from 'react';\r\nimport {useDispatch,useSelector} from \"react-redux\"\r\nimport {LOAD_USER_POSTS_REQUEST} from \"../modules/postReducer\"\r\nimport withRouter from \"with-router\"\r\nimport PostForm from \"../components/PostForm\"\r\nimport Posts from \"../components/Posts\"\r\nimport useSWR from \"swr\";\r\nimport axios from \"axios\"\r\nimport {backAddress} from \"../backAddress\"\r\n\r\nconst fetcher = (url)=>axios.get(url,{withCredentials:true}).then(result=>result.data);\r\n\r\n\r\nfunction UserProfile({history,match}){\r\n    const dispatch = useDispatch();\r\n\r\n    const {data:UserPostsData,error:UserPostsError} = useSWR(`${backAddress}/posts/${match.params.UserId}`,fetcher);\r\n\r\n    return (\r\n    <>\r\n    {\r\n        (UserPostsData||UserPostsError)?(\r\n            <>\r\n                <PostForm />\r\n                <div id=\"Home\">\r\n                    <Posts posts={UserPostsData} />\r\n                </div>\r\n            </>\r\n        ):<h1>loading..</h1>\r\n    }\r\n    </>\r\n    );\r\n}\r\n\r\nexport default withRouter(UserProfile);","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\hooks\\useInput.js",["146"],"import React,{useState} from 'react';\r\n\r\nfunction useInput(init=\"\"){\r\n    const [text,setText] = useState(init);\r\n    const onChangeText = (e)=>{\r\n        setText(e.target.value);\r\n    }\r\n    return [text,setText,onChangeText];\r\n}\r\n\r\nexport default useInput;","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\modules\\userReducer.js",[],"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\modules\\postReducer.js",["147","148","149"],"import produce from \"immer\";\r\nimport {PostLimit} from \"../backAddress\"\r\nconst initialState = {\r\n    posts:[],\r\n\r\n    imagePath:[],\r\n\r\n    zoomImg:[],\r\n    zoomStatus:\"none\",\r\n\r\n    addPostLoading:false,\r\n    addPostDone:false,\r\n    addPostError:null,\r\n\r\n    addCommentLoading:false,\r\n    addCommentDone:false,\r\n    addCommentError:null,\r\n\r\n    uploadImageLoading:false,\r\n    uploadImageDone:false,\r\n    uploadImageError:null,\r\n\r\n    removeImageLoading:false,\r\n    removeImageDone:false,\r\n\r\n    removeAllImageLoading:false,\r\n    removeAllImageDone:false,\r\n\r\n    loadPostsLoading:false,\r\n    loadPostsDone:false,\r\n    loadPostsError:null,\r\n\r\n    canLoadPosts:true,\r\n\r\n    \r\n    likePostLoading:false,\r\n    likePostDone:false,\r\n    likePostError:null,\r\n\r\n    unlikePostLoading:false,\r\n    unlikePostDone:false,\r\n    unlikePostError:null,\r\n\r\n    editPostLoading:false,\r\n    editPostDone:false,\r\n    editPostError:null,\r\n\r\n    removePostLoading:false,\r\n    removePostDone:false,\r\n    removePostError:null,\r\n\r\n    prevLoadMode:null,\r\n\r\n}\r\n\r\nexport const ADD_POST_REQUEST = \"postReducer/ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"postReducer/ADD_POST_SUCCESS\";\r\nexport const ADD_POST_ERROR = \"postReducer/ADD_POST_ERROR\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"postReducer/ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"postReducer/ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_ERROR = \"postReducer/ADD_COMMENT_ERROR\";\r\n\r\nexport const UPLOAD_IMAGE_REQUEST = \"postReducer/UPLOAD_IMAGE_REQUEST\";\r\nexport const UPLOAD_IMAGE_SUCCESS = \"postReducer/UPLOAD_IMAGE_SUCCESS\";\r\nexport const UPLOAD_IMAGE_ERROR = \"postReducer/UPLOAD_IMAGE_ERROR\";\r\n\r\nexport const REMOVE_IMAGE_REQUEST = \"postReducer/REMOVE_IMAGE_REQUEST\";\r\nexport const REMOVE_IMAGE_SUCCESS = \"postReducer/REMOVE_IMAGE_SUCCESS\";\r\n\r\nexport const REMOVE_ALL_IMAGE_REQUEST = \"postReducer/REMOVE_ALL_IMAGE_REQUEST\";\r\nexport const REMOVE_ALL_IMAGE_SUCCESS = \"postReducer/REMOVE_ALL_IMAGE_SUCCESS\";\r\n\r\nexport const LOAD_POSTS_REQUEST = \"postReducer/LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"postReducer/LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_ERROR = \"postReducer/LOAD_POSTS_ERROR\";\r\n\r\nexport const ZOOM_IMAGE_REQUEST = \"postReducer/ZOOM_IMAGE_REQUEST\";\r\nexport const ZOOM_IMAGE_SUCCESS = \"postReducer/ZOOM_IMAGE_SUCCESS\";\r\nexport const ZOOM_IMAGE_OUT_REQUEST = \"postReducer/ZOOM_IMAGE_OUT_REQUEST\";\r\nexport const ZOOM_IMAGE_OUT_SUCCESS = \"postReducer/ZOOM_IMAGE_OUT_SUCCESS\";\r\n\r\nexport const LIKE_POST_REQUEST = \"postReducer/LIKE_POST_REQUEST\";\r\nexport const LIKE_POST_SUCCESS = \"postReducer/LIKE_POST_SUCCESS\";\r\nexport const LIKE_POST_ERROR = \"postReducer/LIKE_POST_ERROR\";\r\n\r\nexport const UNLIKE_POST_REQUEST = \"postReducer/UNLIKE_POST_REQUEST\";\r\nexport const UNLIKE_POST_SUCCESS = \"postReducer/UNLIKE_POST_SUCCESS\";\r\nexport const UNLIKE_POST_ERROR = \"postReducer/UNLIKE_POST_ERROR\";\r\n\r\nexport const EDIT_POST_REQUEST = \"postReducer/EDIT_POST_REQUEST\";\r\nexport const EDIT_POST_SUCCESS = \"postReducer/EDIT_POST_SUCCESS\";\r\nexport const EDIT_POST_ERROR = \"postReducer/EDIT_POST_ERROR\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"postReducer/REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"postReducer/REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_ERROR = \"postReducer/REMOVE_POST_ERROR\";\r\n\r\nexport const LOAD_MY_POSTS_REQUEST = \"postReducer/LOAD_MY_POSTS_REQUEST\";\r\nexport const LOAD_MY_POSTS_SUCCESS = \"postReducer/LOAD_MY_POSTS_SUCCESS\";\r\nexport const LOAD_MY_POSTS_ERROR = \"postReducer/LOAD_MY_POSTS_ERROR\";\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = \"postReducer/LOAD_HASHTAG_POSTS_REQUEST\";\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = \"postReducer/LOAD_HASHTAG_POSTS_SUCCESS\";\r\nexport const LOAD_HASHTAG_POSTS_ERROR = \"postReducer/LOAD_HASHTAG_POSTS_ERROR\";\r\n\r\nfunction postReducer(state=initialState,action){\r\n    return produce(state,(draft)=>{\r\n        switch(action.type){\r\n            case ADD_POST_REQUEST:\r\n                draft.addPostLoading = true;\r\n                draft.addPostDone = false;\r\n                draft.addPostError = null;\r\n                break;\r\n            case ADD_POST_SUCCESS: // {data:addPostApi().data}\r\n                draft.addPostLoading = false;\r\n                draft.addPostDone = true;\r\n                draft.posts.unshift(action.data);\r\n                break;\r\n            case ADD_POST_ERROR:\r\n                draft.addPostLoading = false;\r\n                draft.addPostError = action.data;\r\n                break;\r\n        \r\n            case ADD_COMMENT_REQUEST:\r\n                draft.addCommentLoading = true;\r\n                draft.addCommentDone = false;\r\n                draft.addCommentError = null;\r\n                break;\r\n            case ADD_COMMENT_SUCCESS:{ // {data:addCommentApi().data}\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentDone = true;\r\n                var post = draft.posts.find(post=>post.id === action.data.PostId);\r\n                post.Comments.unshift(action.data);\r\n                break;\r\n            }\r\n            case ADD_COMMENT_ERROR:\r\n                draft.addCommentLoading = false;\r\n                draft.addCommentError = action.data;\r\n                break;  \r\n\r\n            case UPLOAD_IMAGE_REQUEST:\r\n                draft.uploadImageLoading = true;\r\n                draft.uploadImageDone = false;\r\n                draft.uploadImageError = null;\r\n                break;\r\n            case UPLOAD_IMAGE_SUCCESS:{ // {data:uploadImageApi().data}\r\n                draft.uploadImageLoading = false;\r\n                draft.uploadImageDone = true;\r\n                draft.imagePath = draft.imagePath.concat(action.data);\r\n                break;\r\n            }\r\n            case UPLOAD_IMAGE_ERROR:\r\n                draft.uploadImageLoading = false;\r\n                draft.uploadImageError = action.data;\r\n                break;  \r\n\r\n            case REMOVE_IMAGE_REQUEST:\r\n                draft.removeImageLoading = true;\r\n                draft.removeImageDone = false;\r\n                draft.removeImageError = null;\r\n                break;\r\n            case REMOVE_IMAGE_SUCCESS:{ // {data:nowIndex}\r\n                draft.removeImageLoading = false;\r\n                draft.removeImageDone = true;\r\n                draft.imagePath = draft.imagePath.filter((v,i)=> i !== action.data);\r\n                break;\r\n            }\r\n\r\n            case REMOVE_ALL_IMAGE_REQUEST:\r\n                draft.removeImageLoading = true;\r\n                draft.removeImageDone = false;\r\n                break;\r\n            case REMOVE_ALL_IMAGE_SUCCESS:{ // \r\n                draft.removeImageLoading = false;\r\n                draft.removeImageDone = true;\r\n                draft.imagePath = [];\r\n                break;\r\n            }\r\n\r\n            case LOAD_POSTS_REQUEST:\r\n            case LOAD_MY_POSTS_REQUEST:\r\n            case LOAD_HASHTAG_POSTS_REQUEST:\r\n                draft.loadPostsLoading = true;\r\n                draft.loadPostsDone = false;\r\n                draft.loadPostsError = null;\r\n                break;\r\n            case LOAD_POSTS_SUCCESS:\r\n            case LOAD_MY_POSTS_SUCCESS:\r\n            case LOAD_HASHTAG_POSTS_SUCCESS:{ // {data:loadPostsApi().data}\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsDone = true;\r\n                \r\n                    \r\n                \r\n                if(draft.prevLoadMode !== action.type ){\r\n                    draft.posts = action.data;\r\n                    draft.prevLoadMode = action.type;\r\n                } else {\r\n                    if(action.type === LOAD_POSTS_SUCCESS)\r\n                        draft.posts = draft.posts.concat(action.data);\r\n                    else\r\n                        draft.posts = action.data;\r\n                }\r\n\r\n                if(action.type === LOAD_POSTS_SUCCESS && action.data.length - PostLimit < 0){\r\n                    draft.canLoadPosts = false;\r\n                }\r\n\r\n\r\n                break;\r\n            }\r\n            case LOAD_POSTS_ERROR:\r\n            case LOAD_MY_POSTS_ERROR:\r\n            case LOAD_HASHTAG_POSTS_ERROR:\r\n                draft.loadPostsLoading = false;\r\n                draft.loadPostsError = action.data;\r\n                break; \r\n     \r\n            case ZOOM_IMAGE_SUCCESS:{ // {data:[img...]}\r\n                draft.zoomImg = action.data;\r\n                draft.zoomStatus = \"flex\";\r\n                break;\r\n            }\r\n            case ZOOM_IMAGE_OUT_SUCCESS:\r\n                draft.zoomImg = [];\r\n                draft.zoomStatus = \"none\";\r\n                break; \r\n                    \r\n            case LIKE_POST_REQUEST:\r\n                draft.likePostLoading = true;\r\n                draft.likePostDone = false;\r\n                draft.likePostError = null;\r\n                break;\r\n            case LIKE_POST_SUCCESS:{ // {data:{UserId,PostId}}\r\n                draft.likePostLoading = false;\r\n                draft.likePostDone = true;\r\n                var post = draft.posts.find(post=>post.id === action.data.PostId);\r\n                post.Likers.push({id:action.data.UserId});\r\n                break;}\r\n            case LIKE_POST_ERROR:\r\n                draft.likePostLoading = false;\r\n                draft.likePostError = action.data;\r\n                break;\r\n\r\n            case UNLIKE_POST_REQUEST:\r\n                draft.unlikePostLoading = true;\r\n                draft.unlikePostDone = false;\r\n                draft.unlikePostError = null;\r\n                break;  \r\n            case UNLIKE_POST_SUCCESS:{ // {data:{UserId,PostId}}\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostDone = true;\r\n                var post = draft.posts.find(post=>post.id === action.data.PostId);\r\n                post.Likers = post.Likers.filter(user=>user.id !== action.data.UserId);\r\n                break;}\r\n            case UNLIKE_POST_ERROR:\r\n                draft.unlikePostLoading = false;\r\n                draft.unlikePostError = action.data;\r\n                break;\r\n\r\n            case EDIT_POST_REQUEST:\r\n                draft.editPostLoading = true;\r\n                draft.editPostDone = false;\r\n                draft.editPostError = null;\r\n                break;  \r\n            case EDIT_POST_SUCCESS:{ // {data:{PostId,title,description}}\r\n                draft.editPostLoading = false;\r\n                draft.editPostDone = true;\r\n                var post = draft.posts.find(post=>post.id === action.data.PostId);\r\n                post.title = action.data.title;\r\n                post.description = action.data.description;\r\n                break;}\r\n            case EDIT_POST_ERROR:\r\n                draft.editPostLoading = false;\r\n                draft.editPostError = action.data;\r\n                break;\r\n\r\n            case REMOVE_POST_REQUEST:\r\n                draft.removePostLoading = true;\r\n                draft.removePostDone = false;\r\n                draft.removePostError = null;\r\n                break;  \r\n            case REMOVE_POST_SUCCESS:{ // {data:{PostId}}\r\n                draft.removePostLoading = false;\r\n                draft.removePostDone = true;\r\n                draft.posts = draft.posts.filter(post=>post.id !== action.data.PostId);\r\n                break;}\r\n            case REMOVE_POST_ERROR:\r\n                draft.removePostLoading = false;\r\n                draft.removePostError = action.data;\r\n                break;\r\n\r\n\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n}\r\n\r\nexport default postReducer;","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\sagas\\postSaga.js",["150"],"import {takeLatest,fork,call,all, put, takeEvery} from \"redux-saga/effects\"\r\nimport {\r\n    ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_ERROR,\r\n    ADD_COMMENT_REQUEST,ADD_COMMENT_SUCCESS,ADD_COMMENT_ERROR,\r\n    UPLOAD_IMAGE_REQUEST,UPLOAD_IMAGE_SUCCESS,UPLOAD_IMAGE_ERROR,\r\n    REMOVE_IMAGE_REQUEST,REMOVE_IMAGE_SUCCESS,\r\n    REMOVE_ALL_IMAGE_REQUEST,REMOVE_ALL_IMAGE_SUCCESS,\r\n    LOAD_POSTS_REQUEST,LOAD_POSTS_SUCCESS,LOAD_POSTS_ERROR,\r\n    ZOOM_IMAGE_REQUEST,ZOOM_IMAGE_SUCCESS,ZOOM_IMAGE_OUT_REQUEST,ZOOM_IMAGE_OUT_SUCCESS,\r\n    LIKE_POST_REQUEST,LIKE_POST_SUCCESS,LIKE_POST_ERROR,\r\n    UNLIKE_POST_REQUEST,UNLIKE_POST_SUCCESS,UNLIKE_POST_ERROR,\r\n    EDIT_POST_REQUEST,EDIT_POST_SUCCESS,EDIT_POST_ERROR,\r\n    REMOVE_POST_REQUEST,REMOVE_POST_SUCCESS,REMOVE_POST_ERROR,\r\n    LOAD_MY_POSTS_REQUEST,LOAD_MY_POSTS_SUCCESS,LOAD_MY_POSTS_ERROR,\r\n    LOAD_HASHTAG_POSTS_REQUEST,LOAD_HASHTAG_POSTS_SUCCESS,LOAD_HASHTAG_POSTS_ERROR,\r\n} from \"../modules/postReducer\"\r\n\r\nimport {\r\n    ADD_POST_TO_ME,REMOVE_POST_TO_ME,\r\n} from \"../modules/userReducer\"\r\n\r\nimport axios from \"axios\"\r\n\r\nimport {PostLimit} from \"../backAddress\"\r\n\r\nfunction addPostApi(data){\r\n    return axios.post(\"/post\",data);\r\n}\r\n\r\nfunction* addPost(action){//{data:{title,description,images}}\r\n    try{\r\n        const result = yield call(addPostApi,action.data);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:{id:result.data.id},\r\n        })\r\n    } catch(error){\r\n        console.error(error);\r\n        yield put({\r\n            type:ADD_POST_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction addCommentApi(data){\r\n    return axios.post(`/post/${data.PostId}/comment`,{description:data.comment});\r\n}\r\n\r\nfunction* addComment(action){//{data:{PostId,comment}}\r\n    try{\r\n        const result = yield call(addCommentApi,action.data);\r\n        yield put({\r\n            type:ADD_COMMENT_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    } catch(error){\r\n        console.error(error);\r\n        yield put({\r\n            type:ADD_COMMENT_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction uploadImageApi(data){\r\n    return axios.post(`/post/images`,data);\r\n}\r\n\r\nfunction* uploadImage(action){//{data:new FormData()}\r\n    try{\r\n        const result = yield call(uploadImageApi,action.data);\r\n        yield put({\r\n            type:UPLOAD_IMAGE_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    } catch(error){\r\n        console.error(error);\r\n        yield put({\r\n            type:UPLOAD_IMAGE_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadPostsApi(data){\r\n    return axios.get(`/posts?lastId=${data || 0}&limit=${PostLimit}`);\r\n}\r\n\r\nfunction* loadPosts(action){ // {data:undefined or number}\r\n    try{\r\n        const result = yield call(loadPostsApi,action.data);\r\n        yield put({\r\n            type:LOAD_POSTS_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    } catch(error){\r\n        console.error(error);\r\n        yield put({\r\n            type:LOAD_POSTS_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* removeImage(action){//{data:nowIndex}\r\n    yield put({\r\n        type:REMOVE_IMAGE_SUCCESS,\r\n        data:action.data,\r\n    })\r\n}\r\n\r\nfunction* removeAllImage(action){//\r\n    yield put({\r\n        type:REMOVE_ALL_IMAGE_SUCCESS,\r\n    })\r\n}\r\n\r\nfunction* zoomImg(action){//{data:[img..]}\r\n    yield put({\r\n        type:ZOOM_IMAGE_SUCCESS,\r\n        data:action.data,\r\n    })\r\n}\r\n\r\nfunction* zoomImgOut(action){//\r\n    yield put({\r\n        type:ZOOM_IMAGE_OUT_SUCCESS,\r\n    })\r\n}\r\n\r\nfunction unlikePostApi(data){\r\n    return axios.patch(`/post/${data}/unlike`);\r\n}\r\n\r\nfunction* unlikePost(action){ // {data:PostId}\r\n    try{\r\n        const result = yield call(unlikePostApi,action.data);\r\n        yield put({\r\n            type:UNLIKE_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    } catch(error){\r\n        console.error(error);\r\n        yield put({\r\n            type:UNLIKE_POST_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction likePostApi(data){\r\n    return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action){ // {data:PostId}\r\n    try{\r\n        const result = yield call(likePostApi,action.data);\r\n        yield put({\r\n            type:LIKE_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    } catch(error){\r\n        console.error(error);\r\n        yield put({\r\n            type:LIKE_POST_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction editPostApi(data){\r\n    const {title,description} = data;\r\n    return axios.put(`/post/${data.PostId}/edit`,{title,description});\r\n}\r\n\r\nfunction* editPost(action){ // {data:{PostId,title,description}}\r\n    try{\r\n        const result = yield call(editPostApi,action.data);\r\n        yield put({\r\n            type:EDIT_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    } catch(error){\r\n        console.error(error);\r\n        yield put({\r\n            type:EDIT_POST_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction removePostApi(data){\r\n    return axios.delete(`/post/${data}/delete`);\r\n}\r\n\r\nfunction* removePost(action){ // {data:PostId}\r\n    try{\r\n        const result = yield call(removePostApi,action.data);\r\n        yield put({\r\n            type:REMOVE_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n        yield put({\r\n            type:REMOVE_POST_TO_ME,\r\n            data:action.data,\r\n        })\r\n    } catch(error){\r\n        console.error(error);\r\n        yield put({\r\n            type:REMOVE_POST_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadMyPostsApi(){\r\n    return axios.get(\"/posts/myPosts\");\r\n}\r\n\r\nfunction* loadMyPosts(action){//\r\n    try{\r\n        const result = yield call(loadMyPostsApi);\r\n        yield put({\r\n            type:LOAD_MY_POSTS_SUCCESS,\r\n            data:result.data,\r\n        })\r\n    } catch(error){\r\n        yield put({\r\n            type:LOAD_MY_POSTS_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadHashtagPostsApi(data){\r\n    return axios.get(`/posts/hashtag/${data}`);\r\n}\r\n\r\nfunction* loadHashtagPosts(action){//{data:tag}\r\n    try{\r\n        const result = yield call(loadHashtagPostsApi,action.data);\r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data:result.data,\r\n        })\r\n    } catch(error){\r\n        yield put({\r\n            type:LOAD_HASHTAG_POSTS_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* addPostWatch(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction* addCommentWatch(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\nfunction* uploadImageWatch(){\r\n    yield takeLatest(UPLOAD_IMAGE_REQUEST,uploadImage);\r\n}\r\n\r\nfunction* removeImageWatch(){\r\n    yield takeLatest(REMOVE_IMAGE_REQUEST,removeImage);\r\n}\r\n\r\nfunction* removeAllImageWatch(){\r\n    yield takeLatest(REMOVE_ALL_IMAGE_REQUEST,removeAllImage);\r\n}\r\n\r\nfunction* loadPostsWatch(){\r\n    yield takeEvery(LOAD_POSTS_REQUEST,loadPosts);\r\n}\r\n\r\nfunction* zoomImgWatch(){\r\n    yield takeEvery(ZOOM_IMAGE_REQUEST,zoomImg);\r\n}\r\n\r\nfunction* zoomImgOutWatch(){\r\n    yield takeEvery(ZOOM_IMAGE_OUT_REQUEST,zoomImgOut);\r\n}\r\n\r\nfunction* likePostWatch(){\r\n    yield takeEvery(LIKE_POST_REQUEST,likePost);\r\n}\r\n\r\nfunction* unlikePostWatch(){\r\n    yield takeEvery(UNLIKE_POST_REQUEST,unlikePost);\r\n}\r\n\r\nfunction* editPostWatch(){\r\n    yield takeEvery(EDIT_POST_REQUEST,editPost);\r\n}\r\n\r\nfunction* removePostWatch(){\r\n    yield takeEvery(REMOVE_POST_REQUEST,removePost);\r\n}\r\nfunction* loadMyPostsWatch(){\r\n    yield takeLatest(LOAD_MY_POSTS_REQUEST,loadMyPosts);\r\n}\r\nfunction* loadHashtagPostsWatch(){\r\n    yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST,loadHashtagPosts);\r\n}\r\nexport default function* userSaga(){\r\n    yield all([\r\n        call(addPostWatch),\r\n        call(addCommentWatch),\r\n        call(uploadImageWatch),\r\n        call(removeImageWatch),\r\n        call(removeAllImageWatch),\r\n        call(loadPostsWatch),\r\n        call(zoomImgWatch),\r\n        call(zoomImgOutWatch),\r\n        call(likePostWatch),\r\n        call(unlikePostWatch),\r\n        call(editPostWatch),\r\n        call(removePostWatch),\r\n        \r\n        call(loadMyPostsWatch),\r\n        call(loadHashtagPostsWatch),\r\n    ])\r\n} ","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\sagas\\userSaga.js",["151","152"],"import {takeLatest,fork,call,all, put} from \"redux-saga/effects\"\r\nimport {\r\n    LOG_IN_REQUEST,LOG_IN_SUCCESS,LOG_IN_ERROR,\r\n    LOG_OUT_REQUEST,LOG_OUT_SUCCESS,LOG_OUT_ERROR,\r\n    SIGN_UP_REQUEST,SIGN_UP_SUCCESS,SIGN_UP_ERROR,\r\n    LOAD_MY_INFO_REQUEST,LOAD_MY_INFO_SUCCESS,LOAD_MY_INFO_ERROR,\r\n} from \"../modules/userReducer\"\r\nimport axios from \"axios\"\r\n\r\nfunction logInApi(data){\r\n    console.log(\"api\");\r\n    return axios.post(\"/user/login\",data);\r\n}\r\n\r\nfunction* logIn(action){//{data:{mail,password}}\r\n    try{\r\n        const result = yield call(logInApi,action.data);\r\n        yield put({\r\n            type:LOG_IN_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    } catch(error){\r\n        console.error(error);\r\n        yield put({\r\n            type:LOG_IN_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logOutApi(data){\r\n    return axios.post(\"/user/logout\",data)\r\n}\r\n\r\nfunction* logOut(action){\r\n    try{\r\n        const result = yield call(logOutApi,action.data)\r\n        yield put({\r\n            type:LOG_OUT_SUCCESS,\r\n        })\r\n    } catch(error){\r\n        yield put({\r\n            type:LOG_OUT_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signUpApi(data){\r\n    return axios.post(\"/user/signup\",data);\r\n}\r\n\r\nfunction* signUp(action){//{data:{mail,password,name,color,backgroundColor}}\r\n    try{\r\n        const result = yield call(signUpApi,action.data);\r\n        yield put({\r\n            type:SIGN_UP_SUCCESS,\r\n            data:result.data,\r\n        })\r\n    } catch(error){\r\n        yield put({\r\n            type:SIGN_UP_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction loadMyInfoApi(){\r\n    return axios.get(\"/user\");\r\n}\r\n\r\nfunction* loadMyInfo(action){//\r\n    try{\r\n        const result = yield call(loadMyInfoApi);\r\n        yield put({\r\n            type:LOAD_MY_INFO_SUCCESS,\r\n            data:result.data,\r\n        })\r\n    } catch(error){\r\n        yield put({\r\n            type:LOAD_MY_INFO_ERROR,\r\n            data:error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction* logInWatch(){\r\n    yield takeLatest(LOG_IN_REQUEST,logIn);\r\n}\r\nfunction* logOutWatch(){\r\n    yield takeLatest(LOG_OUT_REQUEST,logOut);\r\n}\r\nfunction* signUpWatch(){\r\n    yield takeLatest(SIGN_UP_REQUEST,signUp);\r\n}\r\nfunction* loadMyInfoWatch(){\r\n    yield takeLatest(LOAD_MY_INFO_REQUEST,loadMyInfo);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        call(logInWatch),\r\n        call(logOutWatch),\r\n        call(signUpWatch),\r\n        call(loadMyInfoWatch),\r\n    ])\r\n} ","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\PostForm.js",["153","154","155","156"],"import React,{useCallback,useEffect,useRef} from 'react';\r\nimport useInput from \"../hooks/useInput\"\r\nimport {useSelector,useDispatch} from \"react-redux\";\r\nimport {ADD_POST_REQUEST,UPLOAD_IMAGE_REQUEST,REMOVE_ALL_IMAGE_REQUEST} from \"../modules/postReducer\"\r\nimport ImageForm from \"./ImageForm\";\r\n\r\nfunction PostForm(){\r\n    const dispatch = useDispatch();\r\n    const {me} = useSelector(state=>state.userReducer);\r\n    const {addPostLoading,addPostDone,addPostError,imagePath} = useSelector(state=>state.postReducer);\r\n\r\n    const [title,setTitle,onChangeTitle] = useInput(\"\");\r\n    const [description,setDescription,onChangeDescription] = useInput(\"\");\r\n    const checkInput = useRef();\r\n    \r\n    const onSubmit = useCallback((e)=>{\r\n        e.preventDefault();\r\n        console.log(title,description,me.id);\r\n        dispatch({\r\n            type:ADD_POST_REQUEST,\r\n            data:{\r\n                title,\r\n                description,\r\n                images:imagePath,\r\n            },\r\n        })\r\n    },[title,description,imagePath])\r\n\r\n    const onChangeImage = useCallback((e)=>{\r\n        const imageFormData = new FormData();\r\n        Object.keys(e.target.files).forEach(name=>{\r\n            console.log(e.target.files[name]);\r\n            imageFormData.append(\"image\",e.target.files[name]);\r\n        });\r\n        \r\n        // console.log(imageFormData.getAll(\"image\"));\r\n        dispatch({\r\n            type:UPLOAD_IMAGE_REQUEST,\r\n            data:imageFormData,\r\n        });\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        if(addPostDone){\r\n            setTitle(\"\");\r\n            setDescription(\"\");\r\n            checkInput.current.checked = false;\r\n            dispatch({\r\n                type:REMOVE_ALL_IMAGE_REQUEST,\r\n            })\r\n        }\r\n    },[addPostDone])\r\n\r\n    const onChangeChecked = useCallback((e)=>{\r\n        console.dir(e);\r\n    },[])\r\n\r\n    if(!me)\r\n        return null;\r\n\r\n    return (\r\n        <div id=\"PostForm\">\r\n\r\n            <label htmlFor=\"checkHidePostForm\">\r\n                <div className=\"PostFormClick\">\r\n                    <div style={{color:me.color,backgroundColor:me.backgroundColor}} className=\"profile\">{me.name[0].toUpperCase()}</div>\r\n                    <div className=\"lookLikeInput\">{`${me.name}, What happened today?`}</div>\r\n                </div>\r\n            </label>\r\n\r\n            <input onChange={onChangeChecked} ref={checkInput} id=\"checkHidePostForm\" type=\"checkbox\"/>\r\n\r\n            <div className=\"hidePostForm\">\r\n                <label htmlFor=\"checkHidePostForm\">\r\n                    <article>\r\n                        <header>\r\n                            <h2>Post</h2>\r\n                        </header>\r\n                        <article>\r\n                            <form onSubmit={onSubmit}>\r\n                                <p>{me.name}</p>\r\n                                <div>\r\n                                    <input type=\"text\" value={title} placeholder=\"Insert your post title.\" onChange={onChangeTitle}/>\r\n                                </div>\r\n                                {imagePath.length ? <ImageForm images={imagePath} />:null}\r\n                                <div>\r\n                                    <textarea value={description} placeholder=\"Insert your post description.\" onChange={onChangeDescription}></textarea>\r\n                                </div>\r\n                                <div>\r\n                                    <input multiple onChange={onChangeImage} type=\"file\"/>\r\n                                </div>\r\n                                <div>\r\n                                    <input type=\"submit\" value={addPostLoading?\"Loading...\":\"Post\"}/>    \r\n                                </div>\r\n                            </form>\r\n                        </article>\r\n                    </article>\r\n                </label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostForm;","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Posts.js",[],"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\backAddress.js",[],"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\ImageForm.js",["157","158","159"],"import React,{useState,useCallback} from 'react';\r\nimport {backAddress} from \"../backAddress\"\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport {REMOVE_IMAGE_REQUEST} from \"../modules/postReducer\"\r\n\r\nfunction ImageForm({images}){\r\n    const dispatch = useDispatch();\r\n    const [nowIndex,setNowIndex] = useState(0);\r\n    \r\n    const onClick = useCallback((e)=>{\r\n        e.stopPropagation();\r\n        const nextIndex = (nowIndex+1)%images.length;\r\n        setNowIndex(nextIndex);\r\n    },[nowIndex,images]);\r\n\r\n    const onRemove = useCallback((e)=>{\r\n        let nextIndex = -1;\r\n        console.log(nowIndex,images.length-1);\r\n        if(nowIndex === images.length-1){\r\n            nextIndex = nowIndex-1;\r\n        }\r\n        dispatch({\r\n            type:REMOVE_IMAGE_REQUEST,\r\n            data:nowIndex,\r\n        });\r\n        if(nextIndex != -1){\r\n            setNowIndex(nextIndex);\r\n        }\r\n    },[images,nowIndex]);\r\n\r\n    return (\r\n        <div className=\"ImageForm\">\r\n            <div className=\"imgBox\">\r\n                <img src={`${backAddress}/${images[nowIndex]}`} alt=\"\"/>\r\n                <input onClick={onRemove} type=\"button\" value=\"remove\"/>\r\n                <p>{`${nowIndex+1}/${images.length}`}</p>\r\n            </div>\r\n            {images.length > 1 && <input onClick={onClick} type=\"button\" value=\"Next\"/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageForm;","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Post.js",["160","161","162","163","164","165","166","167","168"],"import React,{useState,useCallback,useRef, useEffect} from 'react';\r\nimport Comments from \"./Comments\"\r\nimport {backAddress} from \"../backAddress\"\r\nimport {useSelector,useDispatch} from \"react-redux\"\r\nimport {ZOOM_IMAGE_REQUEST,LIKE_POST_REQUEST,UNLIKE_POST_REQUEST,EDIT_POST_REQUEST,REMOVE_POST_REQUEST} from \"../modules/postReducer\"\r\nimport useInput from \"../hooks/useInput\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nfunction Post({post}){\r\n    const dispatch = useDispatch();\r\n    const {title,description,Images,User,Likers,Comments:var_comments} = post;\r\n    const [openComment,setOpenComment] = useState(false);\r\n    const {me} = useSelector(state=>state.userReducer);\r\n    const {editPostLoading,editPostDone,removePostLoading,removePostDone} = useSelector(state=>state.postReducer);\r\n\r\n    const [isEdit,setIsEdit] = useState(false);\r\n    const [edit_title,edit_setTitle,edit_onChangeTitle] = useInput(title);\r\n    const [edit_description,edit_setDescription,edit_onChangeDescription] = useInput(description);\r\n\r\n    const onClickImg = useCallback(()=>{\r\n        dispatch({\r\n            type:ZOOM_IMAGE_REQUEST,\r\n            data:post.Images.map(img=>img.src),\r\n        })\r\n    },[Images])\r\n\r\n    const onClickComment = useCallback(()=>{\r\n        setOpenComment((prev)=>!prev);\r\n    },[])\r\n\r\n    let ImgHtml = null;\r\n\r\n    if(Images.length === 1){\r\n        ImgHtml = <img title=\"자세히 보기\" onClick={onClickImg} src={`${backAddress}/${Images[0].src}`} alt=\"\"/>;\r\n    }\r\n    else if(Images.length === 2){\r\n        ImgHtml = (\r\n        <div title=\"자세히 보기\" onClick={onClickImg} className=\"PostImg_2\">\r\n            <img src={`${backAddress}/${Images[0].src}`}  alt=\"\"/>\r\n            <img src={`${backAddress}/${Images[1].src}`}  alt=\"\"/>\r\n        </div>\r\n        );\r\n    }\r\n    else if(Images.length > 2){\r\n        ImgHtml = (\r\n            <div title=\"자세히 보기\" onClick={onClickImg} className=\"PostImg_3\">\r\n                <img src={`${backAddress}/${Images[0].src}`}  alt=\"\"/>\r\n                <img src={`${backAddress}/${Images[1].src}`}  alt=\"\"/>\r\n                <div>{Images.length-1}개 더보기..</div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    let isLikeThisPost;\r\n    let isMyPost = false;\r\n    if(me){\r\n        isLikeThisPost = post.Likers.find(user=>user.id === me.id);\r\n        isMyPost = me.Posts.find(myPost=>myPost.id === post.id);\r\n    }\r\n    const onClickLike = useCallback((e)=>{\r\n        dispatch({\r\n            type:LIKE_POST_REQUEST,\r\n            data:post.id,\r\n        })\r\n    },[me]);\r\n\r\n    const onClickUnLike = useCallback((e)=>{\r\n        dispatch({\r\n            type:UNLIKE_POST_REQUEST,\r\n            data:post.id,\r\n        })\r\n    },[me]);\r\n\r\n\r\n    const onClickEdit = useCallback((e)=>{\r\n        setIsEdit(prev=>!prev);\r\n    },[]);\r\n\r\n    const onEditSubmit = useCallback((e)=>{\r\n        dispatch({\r\n            type:EDIT_POST_REQUEST,\r\n            data:{\r\n                PostId:post.id,\r\n                title:edit_title,\r\n                description:edit_description,\r\n            }\r\n        })\r\n    },[edit_title,edit_description,post]);\r\n\r\n    const onClickRemove = useCallback((e)=>{\r\n        dispatch({\r\n            type:REMOVE_POST_REQUEST,\r\n            data:post.id\r\n        })\r\n    },[post])\r\n\r\n    useEffect(()=>{\r\n        if(editPostDone){\r\n            setIsEdit(false);\r\n        }\r\n    },[editPostDone])\r\n\r\n    return (\r\n        <div className=\"postCard\">\r\n            {removePostLoading && <h1>loading</h1>}\r\n            <header>\r\n                <Link to={`/userPosts/${post.User.id}`}>\r\n                    <div style={{color:post.User.color,backgroundColor:post.User.backgroundColor,}} className=\"firstName\">{User.name[0].toUpperCase()}</div>\r\n                    <div className=\"fullName\">{User.name}</div>\r\n                </Link>\r\n                {isMyPost && <div className=\"removeButtonDiv\"><button onClick={onClickRemove}>remove</button></div>}\r\n            </header>\r\n            {\r\n            isEdit? // edit\r\n            <article>\r\n\r\n                <header>\r\n                    <h3><input type=\"text\" value={edit_title} onChange={edit_onChangeTitle} /></h3>\r\n                </header>\r\n\r\n                <article>\r\n                    {ImgHtml}\r\n                    <article>\r\n                        <p className=\"name\">{User.name}</p>\r\n                        <p className=\"description\"><textarea cols=\"30\" rows=\"10\" value={edit_description} onChange={edit_onChangeDescription} /></p>\r\n                    </article>\r\n                </article>\r\n                \r\n                <footer>\r\n                    <p>Likes {Likers.length}</p>\r\n                    <p onClick={onClickComment}>Comments {var_comments.length}</p>\r\n                </footer>\r\n\r\n            </article>\r\n            : // not edit\r\n            <article> \r\n\r\n                <header>\r\n                    <h3> \r\n                        {title.split(/(#[^\\s#]+)/g).map((v,i)=>{\r\n                            if(v.match(/(#[^\\s#]+)/)){\r\n                                return <Link className=\"hashtag\" key={i} to={`/hashtag/${v.slice(1)}`}>{v}</Link>\r\n                            }\r\n                            return v;\r\n                        })}\r\n                    </h3>\r\n                </header>\r\n\r\n                <article>\r\n                    {ImgHtml}\r\n                    <article>\r\n                        <p className=\"name\">{User.name}</p>\r\n                        <p className=\"description\">\r\n                            {description.split(/(#[^\\s#]+)/g).map((v,i)=>{\r\n                                if(v.match(/(#[^\\s#]+)/)){\r\n                                    return <Link className=\"hashtag\" key={i} to={`/hashtag/${v.slice(1)}`}>{v}</Link>\r\n                                }\r\n                                return v;\r\n                            })}\r\n                        </p>\r\n                    </article>\r\n                </article>\r\n                \r\n                <footer>\r\n                    <p>Likes {Likers.length}</p>\r\n                    <p onClick={onClickComment}>Comments {var_comments.length}</p>\r\n                </footer>\r\n\r\n            </article>\r\n            }\r\n            \r\n            {me &&\r\n                <footer>\r\n                    {!isEdit && (isLikeThisPost ? <button onClick={onClickUnLike}>unlike</button> :<button onClick={onClickLike}>like</button>)}\r\n                    {isEdit?<button onClick={onClickEdit}>{editPostLoading?\"loading...\":\"cancle\"}</button>:<button onClick={onClickComment}>comment</button>}\r\n                    {isMyPost?<button onClick={isEdit?onEditSubmit:onClickEdit}>{isEdit?\"change\":(editPostLoading?\"loading...\":\"edit\")}</button>:<button>share</button>}\r\n                </footer>\r\n            }\r\n            {openComment && <Comments PostId={post.id} comments={var_comments}/>}\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Comments.js",[],"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\Comment.js",[],"C:\\코드\\anything\\WEB-FULL-STACK 연습\\front\\front-app\\src\\components\\CommentForm.js",["169","170","171","172","173"],"import React,{useRef,useCallback,useEffect} from 'react';\r\nimport {useDispatch,useSelector} from \"react-redux\"\r\nimport useInput from \"../hooks/useInput\"\r\nimport {ADD_COMMENT_REQUEST} from \"../modules/postReducer\"\r\n\r\nfunction CommentForm({PostId}){\r\n    const dispatch = useDispatch();\r\n    const {me} = useSelector(state=>state.userReducer);\r\n    const {addCommentLoading,addCommentDone,addCommentError} = useSelector(state=>state.postReducer);\r\n    const {color,backgroundColor} = me;\r\n    const [comment,setComment,onChangeComment] = useInput(\"\");\r\n    const input = useRef();\r\n    const inputDiv = useRef();\r\n\r\n    const onClickInputDiv = useCallback((e)=>{\r\n        input.current.focus();\r\n    },[])\r\n\r\n    const onEnter = useCallback((e)=>{\r\n        if(e.key === \"Enter\"){\r\n            dispatch({\r\n                type:ADD_COMMENT_REQUEST,\r\n                data:{\r\n                    PostId,\r\n                    comment,\r\n                },\r\n            })\r\n        }\r\n    },[comment])\r\n\r\n    useEffect(()=>{\r\n        if(addCommentDone){\r\n            setComment(\"\");\r\n        }\r\n    },[addCommentDone])\r\n\r\n    return (\r\n        <div className=\"CommentForm\">\r\n            <header style={{color,backgroundColor}}>\r\n                {me.name[0].toUpperCase()}\r\n            </header>\r\n            <article>\r\n                <div>\r\n                    <textarea onKeyPress={onEnter} value={addCommentLoading?\"Loading...\":comment} onChange={onChangeComment}></textarea>\r\n                </div>\r\n            </article>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentForm;",{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":20,"column":5,"nodeType":"180","endLine":20,"endColumn":12,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":25,"nodeType":"184","messageId":"185","endLine":1,"endColumn":36},{"ruleId":"178","severity":1,"message":"186","line":17,"column":7,"nodeType":"180","endLine":17,"endColumn":9,"suggestions":"187"},{"ruleId":"182","severity":1,"message":"188","line":11,"column":17,"nodeType":"184","messageId":"185","endLine":11,"endColumn":24},{"ruleId":"182","severity":1,"message":"189","line":12,"column":21,"nodeType":"184","messageId":"185","endLine":12,"endColumn":32},{"ruleId":"182","severity":1,"message":"190","line":13,"column":26,"nodeType":"184","messageId":"185","endLine":13,"endColumn":42},{"ruleId":"182","severity":1,"message":"191","line":14,"column":17,"nodeType":"184","messageId":"185","endLine":14,"endColumn":24},{"ruleId":"182","severity":1,"message":"192","line":15,"column":18,"nodeType":"184","messageId":"185","endLine":15,"endColumn":26},{"ruleId":"182","severity":1,"message":"193","line":16,"column":28,"nodeType":"184","messageId":"185","endLine":16,"endColumn":46},{"ruleId":"178","severity":1,"message":"194","line":32,"column":7,"nodeType":"180","endLine":32,"endColumn":31,"suggestions":"195"},{"ruleId":"178","severity":1,"message":"196","line":51,"column":7,"nodeType":"180","endLine":51,"endColumn":42,"suggestions":"197"},{"ruleId":"178","severity":1,"message":"198","line":57,"column":7,"nodeType":"180","endLine":57,"endColumn":19,"suggestions":"199"},{"ruleId":"178","severity":1,"message":"198","line":63,"column":7,"nodeType":"180","endLine":63,"endColumn":11,"suggestions":"200"},{"ruleId":"178","severity":1,"message":"186","line":19,"column":7,"nodeType":"180","endLine":19,"endColumn":9,"suggestions":"201"},{"ruleId":"178","severity":1,"message":"186","line":41,"column":7,"nodeType":"180","endLine":41,"endColumn":44,"suggestions":"202"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":25,"nodeType":"184","messageId":"185","endLine":1,"endColumn":36},{"ruleId":"178","severity":1,"message":"186","line":18,"column":7,"nodeType":"180","endLine":18,"endColumn":12,"suggestions":"203"},{"ruleId":"178","severity":1,"message":"204","line":16,"column":7,"nodeType":"180","endLine":16,"endColumn":9,"suggestions":"205"},{"ruleId":"178","severity":1,"message":"206","line":23,"column":7,"nodeType":"180","endLine":23,"endColumn":22,"suggestions":"207"},{"ruleId":"178","severity":1,"message":"204","line":29,"column":7,"nodeType":"180","endLine":29,"endColumn":9,"suggestions":"208"},{"ruleId":"182","severity":1,"message":"209","line":1,"column":15,"nodeType":"184","messageId":"185","endLine":1,"endColumn":24},{"ruleId":"182","severity":1,"message":"183","line":1,"column":25,"nodeType":"184","messageId":"185","endLine":1,"endColumn":36},{"ruleId":"182","severity":1,"message":"210","line":2,"column":21,"nodeType":"184","messageId":"185","endLine":2,"endColumn":32},{"ruleId":"182","severity":1,"message":"211","line":3,"column":9,"nodeType":"184","messageId":"185","endLine":3,"endColumn":32},{"ruleId":"182","severity":1,"message":"212","line":15,"column":11,"nodeType":"184","messageId":"185","endLine":15,"endColumn":19},{"ruleId":"182","severity":1,"message":"213","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":13},{"ruleId":"214","severity":1,"message":"215","line":238,"column":21,"nodeType":"184","messageId":"216","endLine":238,"endColumn":25},{"ruleId":"214","severity":1,"message":"215","line":254,"column":21,"nodeType":"184","messageId":"216","endLine":254,"endColumn":25},{"ruleId":"214","severity":1,"message":"215","line":270,"column":21,"nodeType":"184","messageId":"216","endLine":270,"endColumn":25},{"ruleId":"182","severity":1,"message":"217","line":1,"column":20,"nodeType":"184","messageId":"185","endLine":1,"endColumn":24},{"ruleId":"182","severity":1,"message":"217","line":1,"column":20,"nodeType":"184","messageId":"185","endLine":1,"endColumn":24},{"ruleId":"182","severity":1,"message":"218","line":37,"column":15,"nodeType":"184","messageId":"185","endLine":37,"endColumn":21},{"ruleId":"182","severity":1,"message":"219","line":10,"column":39,"nodeType":"184","messageId":"185","endLine":10,"endColumn":51},{"ruleId":"178","severity":1,"message":"220","line":27,"column":7,"nodeType":"180","endLine":27,"endColumn":36,"suggestions":"221"},{"ruleId":"178","severity":1,"message":"204","line":41,"column":7,"nodeType":"180","endLine":41,"endColumn":9,"suggestions":"222"},{"ruleId":"178","severity":1,"message":"223","line":52,"column":7,"nodeType":"180","endLine":52,"endColumn":20,"suggestions":"224"},{"ruleId":"182","severity":1,"message":"210","line":3,"column":21,"nodeType":"184","messageId":"185","endLine":3,"endColumn":32},{"ruleId":"225","severity":1,"message":"226","line":26,"column":22,"nodeType":"227","messageId":"228","endLine":26,"endColumn":24},{"ruleId":"178","severity":1,"message":"204","line":29,"column":7,"nodeType":"180","endLine":29,"endColumn":24,"suggestions":"229"},{"ruleId":"182","severity":1,"message":"230","line":1,"column":36,"nodeType":"184","messageId":"185","endLine":1,"endColumn":42},{"ruleId":"182","severity":1,"message":"231","line":14,"column":59,"nodeType":"184","messageId":"185","endLine":14,"endColumn":73},{"ruleId":"182","severity":1,"message":"232","line":17,"column":23,"nodeType":"184","messageId":"185","endLine":17,"endColumn":36},{"ruleId":"182","severity":1,"message":"233","line":18,"column":29,"nodeType":"184","messageId":"185","endLine":18,"endColumn":48},{"ruleId":"178","severity":1,"message":"234","line":25,"column":7,"nodeType":"180","endLine":25,"endColumn":15,"suggestions":"235"},{"ruleId":"178","severity":1,"message":"236","line":65,"column":7,"nodeType":"180","endLine":65,"endColumn":11,"suggestions":"237"},{"ruleId":"178","severity":1,"message":"236","line":72,"column":7,"nodeType":"180","endLine":72,"endColumn":11,"suggestions":"238"},{"ruleId":"178","severity":1,"message":"204","line":88,"column":7,"nodeType":"180","endLine":88,"endColumn":41,"suggestions":"239"},{"ruleId":"178","severity":1,"message":"204","line":95,"column":7,"nodeType":"180","endLine":95,"endColumn":13,"suggestions":"240"},{"ruleId":"182","severity":1,"message":"241","line":9,"column":45,"nodeType":"184","messageId":"185","endLine":9,"endColumn":60},{"ruleId":"182","severity":1,"message":"242","line":13,"column":11,"nodeType":"184","messageId":"185","endLine":13,"endColumn":19},{"ruleId":"182","severity":1,"message":"243","line":15,"column":11,"nodeType":"184","messageId":"185","endLine":15,"endColumn":26},{"ruleId":"178","severity":1,"message":"244","line":29,"column":7,"nodeType":"180","endLine":29,"endColumn":16,"suggestions":"245"},{"ruleId":"178","severity":1,"message":"246","line":35,"column":7,"nodeType":"180","endLine":35,"endColumn":23,"suggestions":"247"},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'history' and 'setValue'. Either include them or remove the dependency array.","ArrayExpression",["250"],"no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["251"],"'setMail' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'setPasswordCheck' is assigned a value but never used.","'setName' is assigned a value but never used.","'setColor' is assigned a value but never used.","'setBackgroundColor' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'onChangePasswordCheck'. Either include it or remove the dependency array.",["252"],"React Hook useCallback has missing dependencies: 'backgroundColor', 'color', and 'dispatch'. Either include them or remove the dependency array.",["253"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["254"],["255"],["256"],["257"],["258"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["259"],"React Hook useCallback has missing dependencies: 'dispatch', 'setMail', and 'setPassword'. Either include them or remove the dependency array.",["260"],["261"],"'useEffect' is defined but never used.","'useSelector' is defined but never used.","'LOAD_USER_POSTS_REQUEST' is defined but never used.","'dispatch' is assigned a value but never used.","'React' is defined but never used.","no-redeclare","'post' is already defined.","redeclared","'fork' is defined but never used.","'result' is assigned a value but never used.","'addPostError' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'dispatch' and 'me.id'. Either include them or remove the dependency array.",["262"],["263"],"React Hook useEffect has missing dependencies: 'dispatch', 'setDescription', and 'setTitle'. Either include them or remove the dependency array.",["264"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["265"],"'useRef' is defined but never used.","'removePostDone' is assigned a value but never used.","'edit_setTitle' is assigned a value but never used.","'edit_setDescription' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'dispatch' and 'post.Images'. Either include them or remove the dependency array.",["266"],"React Hook useCallback has missing dependencies: 'dispatch' and 'post.id'. Either include them or remove the dependency array.",["267"],["268"],["269"],["270"],"'addCommentError' is assigned a value but never used.","'inputDiv' is assigned a value but never used.","'onClickInputDiv' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'PostId' and 'dispatch'. Either include them or remove the dependency array.",["271"],"React Hook useEffect has a missing dependency: 'setComment'. Either include it or remove the dependency array.",["272"],"no-global-assign","no-unsafe-negation",{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"275","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"275","fix":"290"},{"desc":"291","fix":"292"},{"desc":"275","fix":"293"},{"desc":"294","fix":"295"},{"desc":"275","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},{"desc":"303","fix":"304"},{"desc":"303","fix":"305"},{"desc":"306","fix":"307"},{"desc":"303","fix":"308"},{"desc":"309","fix":"310"},{"desc":"311","fix":"312"},"Update the dependencies array to be: [history, setValue, value]",{"range":"313","text":"314"},"Update the dependencies array to be: [dispatch]",{"range":"315","text":"316"},"Update the dependencies array to be: [onChangePasswordCheck, password]",{"range":"317","text":"318"},"Update the dependencies array to be: [isSame, isAgree, dispatch, mail, password, name, color, backgroundColor]",{"range":"319","text":"320"},"Update the dependencies array to be: [history, signUpDone]",{"range":"321","text":"322"},"Update the dependencies array to be: [history, me]",{"range":"323","text":"324"},{"range":"325","text":"316"},"Update the dependencies array to be: [posts, loadPostsLoading, canLoadPosts, dispatch]",{"range":"326","text":"327"},"Update the dependencies array to be: [dispatch, tag]",{"range":"328","text":"329"},{"range":"330","text":"316"},"Update the dependencies array to be: [dispatch, mail, password, setMail, setPassword]",{"range":"331","text":"332"},{"range":"333","text":"316"},"Update the dependencies array to be: [title, description, me.id, dispatch, imagePath]",{"range":"334","text":"335"},{"range":"336","text":"316"},"Update the dependencies array to be: [addPostDone, dispatch, setDescription, setTitle]",{"range":"337","text":"338"},"Update the dependencies array to be: [dispatch, images.length, nowIndex]",{"range":"339","text":"340"},"Update the dependencies array to be: [dispatch, post.Images]",{"range":"341","text":"342"},"Update the dependencies array to be: [dispatch, post.id]",{"range":"343","text":"344"},{"range":"345","text":"344"},"Update the dependencies array to be: [dispatch, post.id, edit_title, edit_description]",{"range":"346","text":"347"},{"range":"348","text":"344"},"Update the dependencies array to be: [PostId, comment, dispatch]",{"range":"349","text":"350"},"Update the dependencies array to be: [addCommentDone, setComment]",{"range":"351","text":"352"},[697,704],"[history, setValue, value]",[597,599],"[dispatch]",[1257,1281],"[onChangePasswordCheck, password]",[1804,1839],"[isSame, isAgree, dispatch, mail, password, name, color, backgroundColor]",[1940,1952],"[history, signUpDone]",[2045,2049],"[history, me]",[600,602],[1448,1485],"[posts, loadPostsLoading, canLoadPosts, dispatch]",[612,617],"[dispatch, tag]",[533,535],[755,770],"[dispatch, mail, password, setMail, setPassword]",[887,889],[1010,1039],"[title, description, me.id, dispatch, imagePath]",[1494,1496],[1762,1775],"[addPostDone, dispatch, setDescription, setTitle]",[916,933],"[dispatch, images.length, nowIndex]",[1188,1196],"[dispatch, post.Images]",[2495,2499],"[dispatch, post.id]",[2655,2659],[3028,3062],"[dispatch, post.id, edit_title, edit_description]",[3217,3223],[982,991],"[PostId, comment, dispatch]",[1092,1108],"[addCommentDone, setComment]"]